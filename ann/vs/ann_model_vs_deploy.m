function [y1] = ann_model_vs_deploy(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 21-Aug-2019 22:09:02.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx6 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1;-1;-0.986959722368283;-1;-1;-1];
x1_step1.gain = [1;1;1.0065629300307;1;1;1.00560178918438];
x1_step1.ymin = -1;

% Layer 1
b1 = [5.4378110620191027;7.30264997102661;-2.411366015878321;-7.6496168132046956;4.5609304547233016;1.0986731227144544;0.62687881482184438;-1.1534085438832831;-0.2264480687672242;-0.37889202520321347];
IW1_1 = [-5.2970713397900964 2.6908094266990177 2.1362518714630028 1.0662229679537456 0.080937644366007908 -3.0682262507838947;-12.461476560887963 4.8817129224804932 0.96710166397023423 0.44218724412943944 0.026208501889947798 -2.2783149165642356;-1.3605696874525264 -4.2693821846927094 2.5255195611653818 0.4471966022522833 -1.322950519881521 2.4400573691330556;2.3926680826047479 -9.1860690539481382 2.2028176794488896 -0.58013352133692098 -1.406357245662196 3.6337871549027212;-7.027910438827556 3.2164391649721078 -0.10136430946660428 -0.34543942687406021 0.15038997004210569 -0.9149690728313854;1.4953012433130852 2.7185399708737008 -1.6177349073307417 -0.1675059723645641 0.89570611522063559 -2.3818463261792351;0.069060655267672105 0.11602460712915763 -0.086564249464076246 -0.053607228685845811 0.019126739468401356 0.28361668088337677;0.51180177242545 -0.90980790340560724 0.69340192911202325 0.71301289510231092 0.007365193512889715 -2.6070654143264989;-6.3166768580297425 3.2516020922600646 -8.7038622604698439 -1.1531243648160734 -1.3497133996591313 1.3514048980253541;0.061506546034457599 -2.4980187736569928 3.4607735356688445 0.004419762559192901 -0.2086391895764238 -2.0958879323485271];

% Layer 2
b2 = -3.0589023930837973;
LW2_1 = [-0.29778675688063139 -1.0639444484120382 -1.2288523718742679 0.14902928089296952 1.3480106854899871 -1.8228696529562383 5.7112308972234125 0.87885598955260436 0.11345590977877297 0.23139142525159317];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.14473457335744;
y1_step1.xoffset = 1.39835821367996;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
